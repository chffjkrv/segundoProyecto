-[1]Pedir login (avanzado)<<<3
-[2]Pedir login (simple)<<<1
-[3]Crear usuario<<<1(sin categorias)
-[4]Modificar usuario<<<2
-[5]Borrar usuario<<<2
-[6]Mostrar 20 perfiles simple<<<1
-[7]Mostrar 20 perfiles avanzado<<<3
-[8]Dar opcion de dar like<<<1
-[9]Dar opcion de dar dislike<<<1
-[10]Mostrar listado de contactos (matches)<<<1
-[11]Generar Abstract<<<1
-[12]Mostrar perfiles completos<<<2
-[13]Crear categorias<<<2
-[14]Modificar categorias<<<2
-[15]Borrar categorias<<<2
-[16]Generar algoritmo de seleccion simple<<<1
-[17]Generar algoritmo de seleccion avanzado<<<3
-[18]Generar chat entre matches<<<3


-------PRIORIDADES-------

1º: 2D ,3D ,6A ,8A ,9J , 10J, 11M, 16M
2º: 4 ,5 ,12 ,13 ,14 , 15
3º:1, 7, 17, 18
---------------------------


--------SPRINT 1º MVC----------

Tareas generales :
	-Carcasa de proyecto
	-Crear BBDDD
	-Crear esquema entidad relacion de las tablas                       
	-Crear Git
	-Crear board en leankit
	Logger info en métodos

*1ºD:
	1.1-Generar HTML de la página principal "PagLogin".
	1.2-Generar CSS para PagLogin.
	1.3-Generar tabla usuarios.
	1.4-Generar clase Usuarios.
	1.5-Generar UsuarioController
	1.6-Generar UsuarioDAO con JPArepository
	1.7-Generar UsuarioDomain
	1.8-Generar UsuarioServiceiNTERFACE
	1.9-Generar UsuarioServiceImplement
	
*3ºD:
	3.1-Generar Html con formulario para crear usuario. (PagPerfil).html
	3.2-Generar Css de crear usuario.
	3.3-Completar UsuarioServiceImplement con las querys de alta usuario.
	
*6ºA: Mostrar 20 perfiles(simple)
	6.1-Crear vista de inicio(HTML,CSS) PagListados.html
	6.2-controller:  método String mostrarPerfiles(Model model, return view en html
	6.3-Método en servicios public List<Usuario> generarPerfiles() que llame a repository(generaPerfilesRepo)
	6.4-Método en repository(generarPerfilesRepo)
	6.5-mostrar perfiles en view de Thymeleaf

*8ºA:
	8.1-Dar opción de dar like
	8.2-en controller  método darLike(int idUsuario) 
	8.3-Crear método en servicios darLike(int idUsuario)
	8.4-Crear método en repositorydarLikeRepo (int idUsuario)
	8.5-Implementar dar like en Thymleaf
	

*9ºJ:
    9.1. Crear tabla "descartes"
    9.2- Crear metodo darDislike(int idUsuario, Model model):String en controlador
    9.3- Crear metodo darDislike(int idUsuario):void en servicios
    9.4- Crear metodo darDislike(int idUsuario):void en datos
    
*10ºJ:

    10.1- Crear metodo mostrarContactos(Model model):String en controlador
    10.2- Crear metodo mostrarContactos(int idUsuario):List<Usuario> en servicios
    10.3- Crear metodo mostrarContactos(int idUsuario):List<Usuario> en datos

*11ºM:
	11.1-Generar Abstract: escribir un texto de unos 15 lineas sobre el proyecto en INGLÉS

*16ºM:
	16.1-Generar algoritmo de seleccion simple: crear método SeleccionSimple con parámetro de entrada tipo String genero, 
	que devuelve un array de obejos con dicho parámetro.
	
	
	
	
-------SPRINT 2--------------
   
*10.2ºJ. Mostrar dislikes
    --Prioridad 2--
    10.1.1. Crear metodo mostrarDislikes(@ModelMap model):String en controlador
    10.1.2. Crear metodo mostrarDislikes(int idUsuario):List<Usuario> en servicios
    10.1.3. Crear metodo mostrarDislikes(int idUsuario):List<Usuario> en datos
    
*10.3ºJ. Mostrar matches
    --Prioridad 2--
    10.1.1. Crear metodo mostrarMatches(@ModelMap model):String en controlador
    10.1.2. Crear metodo mostrarMatches(int idUsuario):List<Usuario> en servicios
    10.1.3. Crear metodo mostrarMatches(int idUsuario):List<Usuario> en datos	
		
		
		
		
		
 
1-martes-viernes:

	
		
2-lunes-martes:

		
		
		
3-miercoles-jueves:
		
		
		
		
		
		public array (objetos) dame20(String genero){
		
		return lista;
		}
		
		